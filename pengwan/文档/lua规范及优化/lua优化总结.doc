>>>>lua优化总结<<<<<
I优化主要看2点：
[1]对luagc的影响：过于频繁的内存申请和过快的内存增长会导致gc的负担加重和调用率增加，这是目前主要影响性能的地方
[2]对内存占用的影响：保证内存占用处于可控范围内，不要有逻辑上的内存泄漏和不可预估的内存增长，这是相对次要的优化
[*]当前游戏脚本中并没有引入模块的使用，所以该部分不在讨论之列
II变量定义：
lua变量分为3种：全局变量，局部变量(local)，上值变量（local - upvalue）
1.区分什么情况定义全局表，什么情况定义非全局表（包括local和upvalue）
[1]可以只在单个文件中被访问的数据定义为非全局表
[2]需要在多个文件中被访问的数据表定义为全局表，然后使用时做local引用（过大和逻辑放在一起不好维护的表也可以单独出来全局化）
[*]local表后，通过全局函数返回的方式意义不大，不需要这样做
[*]对全局表（和函数）的local引用该定义为upvalue还是local见规则2
[*]全局变量和上值变量都是常态占用内存，对GC无影响，但会导致常态内存占用扩大
2.区分什么情况使用函数局部变量，什么情况使用函数上值变量
[1]主要以对变量的访问频繁度来作为依据：
* 如访问该变量的函数是一个预期会被频繁调用的函数那么该变量应该定义为函数的上值
* 如一个循环被调用的变量，应该在循环前作local引用
[2]只有两种情况使用局部变量：
* 预期该函数不会被频繁调用（不由玩家发起的调用或成本较大的玩家发起的调用）
* 该变量表无法重用（或重用代价很大）
3.尽量避免以表作为函数的参数和返回值和中间值
III玩家保存数据区优化：（一期版本限制为4096）
[1] 能用数组用数组
[2] key限制为4个字节以下小写字母
[3] 用时再初始化
[4] 数据申请大小尽量接近预估大小
[5] 数据区申请处尽量写好多少个键值,各键值代表意思,参照Script\ShenBing\sowar.lua,方便自己和他人维护
IV.函数的优化：
[1]对于是否应该用local修饰只在一个文件内被访问的函数，目前持保留态度，不需要这样做
[2]对于内部函数的使用，目前使用较少，需要用前先做分析